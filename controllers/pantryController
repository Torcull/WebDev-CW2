const foodDAO = require("../models/foodModel");
const userDAO = require("../models/userModel");

const db = new foodDAO();

db.init();

exports.foods = function (req, res) {
  db.getAllfoods()
    .then((list) => {
      res.render("food", {
        foods: list,
        title: "Available Foods For Your Pantry",
        activenav: "nav2",
        user: "user",
      });
      console.log("promise resolved");
    })
    .catch((err) => {
      console.log("promise rejected", err);
    });
};
exports.landing_page = function (req, res) {
  db.getAllfoods()
    .then((list) => {
      res.render("home", {
        foods: list,
        title: "Home",
        activenav: "nav1",
      });
      console.log("promise resolved");
    })
    .catch((err) => {
      console.log("promise rejected", err);
    });
};

exports.show_id_food = function (req, res) {
  console.log("filtering id", req.params.id);
  let id = req.params.id;
  db.getFoodsById(id)
    .then((list) => {
      return res.render("select", {
        foods: list,
        title: "Food Confirmation",
        user: "user",
      });
    })
    .catch((err) => {
      console.log("error handling donator's donations,", err);
    });
};

exports.confirm_remove_user = function (req, res) {
  console.log("filtering user", req.params.user);
  let user = req.params.user;
  userDAO
    .getUserByName(user)
    .then((list) => {
      return res.render("adminConfirm", {
        users: list,
      });
    })
    .catch((err) => {
      console.log("error handling donator's donations,", err);
    });
};

exports.confirm_order = function (req, res) {
  let id = req.params.id;
  db.DeleteFoodById(id).then(() => {
    return res.render("thankyou", {
      pantry: "pantry",
    });
  });
};

exports.remove_user = function (req, res) {
  let user = req.params.user;
  userDAO.DeleteUserByName(user).then(() => {
    return res.redirect("/admin");
  });
};
exports.donate = function (req, res) {
  return res.render("donate", {
    title: "Donate",
    user: "user",
    activenav: "nav3",
  });
};

exports.post_donation = function (req, res) {
  console.log("processing post-new_entry contorller");
  if (!req.body.foodname) {
    response.status(400).send("Entries must have an author.");
    return;
  }
  db.addFood(
    req.body.foodname,
    req.body.description,
    req.body.quantity,
    req.body.expiry,
    req.body.donatorname
  );
  return res.render("thankyou", {
    donator: "donator",
  });
};

exports.show_donator_foods = function (req, res) {
  console.log("filtering donator name", req.params.donatorname);
  let donator = req.params.donatorname;
  db.getFoodsByDonator(donator)
    .then((foods) => {
      console.log(foods);
      return res.render("food", {
        title: "Donated Food From " + donator,
        foods: foods,
        user: "user",
      });
    })
    .catch((err) => {
      console.log("error handling donator's donations,", err);
    });
};

exports.register_page = function (req, res) {
  return res.render("register", {
    activenav: "nav7",
  });
};

exports.existing_user = function (req, res) {
  return res.render("existingUser", {
    activenav: "nav7",
  });
};

exports.register_to_access = function (req, res) {
  return res.render("registerToAccess");
};

exports.post_new_user_register_page = function (req, res) {
  const user = req.body.username;
  const password = req.body.pass;
  const role = req.body.role;

  if (!user || !password) {
    return res.send(401, "no user or no password");
  }
  if (role != "donator") {
    return res.send(401, "error processing account");
  }
  userDAO.lookup(user, function (err, u) {
    if (u) {
      return res.redirect("existingUser");
    }
    userDAO.create(user, password, role);
    console.log("register user", user, "password", password, "role", role);
    return res.redirect("/login");
  });
};

exports.admin_new_user = function (req, res) {
  return res.render("addUserAdmin");
};

exports.post_admin_new_user = function (req, res) {
  const user = req.body.username;
  const password = req.body.pass;
  const role = req.body.role;

  if (!user || !password) {
    return res.send(401, "no user or no password");
  }
  userDAO.lookup(user, function (err, u) {
    if (u) {
      return res.send(401, "User found:", user); //could redirect to user already found
    }
    userDAO.create(user, password, role);
    console.log("register user", user, "password", password, "role", role);
    return res.redirect("/admin");
  });
};

exports.login_page = function (req, res) {
  return res.render("login", {
    activenav: "nav8",
  });
};

exports.handle_login = function (req, res) {
  return res.render("home", {
    title: "Scottish Pantry Network",
    user: "user",
  });
};

exports.incorrect_login = function (req, res) {
  return res.render("incorrectLogin", {
    activenav: "nav8",
  });
};

exports.contact_page = function (req, res) {
  return res.render("contact", {
    activenav: "nav5",
  });
};

exports.post_contact = function (req, res) {
  return res.render("thankyou", {
    activenav: "nav5",
  });
};
exports.about = function (req, res) {
  return res.render("about", {
    title: "About us",
  });
};
exports.permission_denied_page = function (req, res) {
  return res.render("permissionDenied", {
    title: "Permission Denied",
    user: "user",
  });
};

exports.admin_page = function (req, res) {
  userDAO
    .getAllUsers()
    .then((list) => {
      return res.render("admin", {
        title: "Admin Page",
        users: list,
        user: "user",
      });
    })
    .catch((err) => {
      console.log("promise rejected", err);
    });
};

exports.logout = function (req, res) {
  return res.clearCookie("jwt").status(200).redirect("/");
};

exports.loggedIn_landing = function (req, res) {
  res.redirect("/");
};
